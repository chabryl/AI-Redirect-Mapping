# Schritt 1: Importieren der benötigten Bibliotheken
import pandas as pd
import numpy as np
import time

# Memory Profiler
!pip install -q memory_profiler
%load_ext memory_profiler

# Für Sentence-BERT Modelle
!pip install -q sentence-transformers
from sentence_transformers import SentenceTransformer

import pandas as pd
import numpy as np
import time
import psutil
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from memory_profiler import memory_usage

# Schritt 2: Lesen der CSV-Datei
# Stelle sicher, dass die Datei 'data_benchmark_3.csv' in deinem Colab-Arbeitsverzeichnis vorhanden ist

data = pd.read_csv('/content/data_benchmark_3.csv', sep=';', on_bad_lines='skip')

# Schritt 3: Kombinieren der Textdaten
# Hier fügen wir die Textspalten zu einer einzelnen Textzeile zusammen
data['combined_text'] = data['title'].fillna('') + ' ' + data['description'].fillna('') + ' ' + data['h1'].fillna('')

# Schritt 4: Definieren der Modelle
models = {
    'all-MiniLM-L6-v2': 'all-MiniLM-L6-v2',
    'paraphrase-multilingual-MiniLM-L12-v2': 'paraphrase-multilingual-MiniLM-L12-v2',
    'distiluse-base-multilingual-cased-v2': 'distiluse-base-multilingual-cased-v2'
}

# Dictionaries zum Speichern der Ergebnisse
embeddings_dict = {}
times_dict = {}

# Schritt 5: Generieren der Embeddings und Messen der Zeit
for model_label, model_name in models.items():
    print(f'Verarbeite Modell: {model_label}')
    start_time = time.time()

    # Laden des Modells
    model = SentenceTransformer(model_name)

    # Generieren der Embeddings
    %memit embeddings = model.encode(data['combined_text'].tolist(), show_progress_bar=True)

    end_time = time.time()
    duration = end_time - start_time
    times_dict[model_label] = duration
    embeddings_dict[model_label] = embeddings

    # Schritt 6: Speichern der Embeddings und der Zeitmessungen
    np.save(f'benchmark/embeddings_{model_label}.npy', embeddings)
    print(f'Embeddings für {model_label} gespeichert. Dauer: {duration:.2f} Sekunden\n')

# Speichern der Zeitmessungen in einer Textdatei
with open('embeddings_times.txt', 'w') as f:
    for model_label, duration in times_dict.items():
        f.write(f'{model_label}: {duration:.2f} Sekunden\n')

print('Alle Embeddings wurden generiert und gespeichert.')
